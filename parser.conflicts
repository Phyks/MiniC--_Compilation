
** Conflict (shift/reduce) in state 47.
** Tokens involved: VOID TINT TIDENT
** The following explanations concentrate on token VOID.
** This state is reached from fichier after reading:

boption(INCLUDE) CLASS IDENT option(supers) LBRACE PUBLIC COLON member 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fichier 
boption(INCLUDE) list(decl) EOF 
                 decl list(decl) 
                 decl_class 
                 CLASS IDENT option(supers) LBRACE PUBLIC COLON list(member) RBRACE SEMICOLON 
                                                                member list(member) 
                                                                       member list(member) 
                                                                       (?)

** In state 47, looking ahead at VOID, reducing production
** boption(VIRTUAL) -> 
** is permitted because of the following sub-derivation:

boption(VIRTUAL) proto SEMICOLON // lookahead token appears because proto can begin with VOID
. 

** In state 47, looking ahead at VOID, shifting is permitted
** because of the following sub-derivation:

decl_vars 
type_rule separated_nonempty_list(COMMA,var) SEMICOLON 
. VOID 

** Conflict (shift/reduce) in state 39.
** Tokens involved: VOID TINT TIDENT
** The following explanations concentrate on token VOID.
** This state is reached from fichier after reading:

boption(INCLUDE) CLASS IDENT option(supers) LBRACE PUBLIC COLON 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

fichier 
boption(INCLUDE) list(decl) EOF 
                 decl list(decl) 
                 decl_class 
                 CLASS IDENT option(supers) LBRACE PUBLIC COLON list(member) RBRACE SEMICOLON 
                                                                member list(member) 
                                                                (?)

** In state 39, looking ahead at VOID, reducing production
** boption(VIRTUAL) -> 
** is permitted because of the following sub-derivation:

boption(VIRTUAL) proto SEMICOLON // lookahead token appears because proto can begin with VOID
. 

** In state 39, looking ahead at VOID, shifting is permitted
** because of the following sub-derivation:

decl_vars 
type_rule separated_nonempty_list(COMMA,var) SEMICOLON 
. VOID 
